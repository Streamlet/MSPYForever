; For convenience of debugging, put the following code to the [AutoExpand] section of
;   X:\Program Files\Microsoft Visual Studio 10.0\Common7\Packages\Debugger\autoexp.dat

;------------------------------------------------------------------------------
;  xl::Array
;------------------------------------------------------------------------------
xl::Array<*>{
    preview (
        #(
            "[",
            $e.m_nEof - $e.m_nStart,
            "](",
            #array(
                expr: $e.m_pData[$e.m_nStart + $i],
                size: $e.m_nEof - $e.m_nStart
            ),
            ")"
        )
    )
    children (
        #(
            #array(
                expr: $e.m_pData[$e.m_nStart + $i],
                size: $e.m_nEof - $e.m_nStart
            )
        )
    )
}
xl::Array<*>::Iterator|xl::Array<*>::ReverseIterator{
    preview (
        *$e.m_pCurrent
    )
    children (
        #( [ptr] : $e.m_pCurrent)
    )
}

;------------------------------------------------------------------------------
;  xl::List
;------------------------------------------------------------------------------
xl::List<*>{
    preview (
        #(
            "[",
            $e.m_nSize,
            "](",
            #list(
                head: $e.m_pHead,
                size: $e.m_nSize,
                next: pNext
            ) : $e.tValue,
            ")"
        )
    )
    children (
        #list(
            head: $e.m_pHead,
            size: $e.m_nSize,
            next: pNext
        ) : $e.tValue
    )
}
xl::List<*>::Iterator|xl::List<*>::ReverseIterator{
    preview (
        $e.m_pCurrent->tValue
    )
    children (
        #(
            [ptr] : &$e.m_pCurrent->tValue
        )
    )
}

;------------------------------------------------------------------------------
;  xl::BinTree
;------------------------------------------------------------------------------
xl::BinTree<*>::Iterator|xl::BinTree<*>::ReverseIterator{
    preview (
        $e.m_pCurrent->tValue.tValue
    )
    children (
        #(
            [ptr] : &$e.m_pCurrent->tValue.tValue
        )
    )
}

;------------------------------------------------------------------------------
;  xl::RBTree
;------------------------------------------------------------------------------
xl::RBTree<*>{
    preview (
        #(
            "[",
            $e.m_nSize,
            "](",
            #tree(
                head: $e.m_tBinTree.m_pRoot,
                left: pLeft,
                right: pRight,
                size: $e.m_nSize
            ) : $e.tValue.tValue,
            ")"
        )
    )
    children (
        #(
            #tree(
                head: $e.m_tBinTree.m_pRoot,
                left: pLeft,
                right: pRight,
                size: $e.m_nSize
            ) : $e.tValue.tValue
        )
    )
}
xl::RBTree<*>::Iterator|xl::BinTree<*>::ReverseIterator{
    preview (
        $e.m_pCurrent->tValue.tValue
    )
    children (
        #(
            [ptr] : &$e.m_pCurrent->tValue.tValue
        )
    )
}

;------------------------------------------------------------------------------
;  xl::Set
;------------------------------------------------------------------------------
xl::Set<*>{
    preview (
        #(
            "[",
            $e.m_tRBTree.m_nSize,
            "](",
            #tree(
                head: $e.m_tRBTree.m_tBinTree.m_pRoot,
                left: pLeft,
                right: pRight,
                size: $e.m_tRBTree.m_nSize
            ) : $e.tValue.tValue,
            ")"
        )
    )
    children (
        #(
            #tree(
                head: $e.m_tRBTree.m_tBinTree.m_pRoot,
                left: pLeft,
                right: pRight,
                size: $e.m_tRBTree.m_nSize
            ) : $e.tValue.tValue
        )
    )
}

;------------------------------------------------------------------------------
;  xl::Pair
;------------------------------------------------------------------------------
xl::Pair<*>{
    preview (
        #(
            $e.Key,
            "->",
            $e.Value
        )
    )
}

;------------------------------------------------------------------------------
;  xl::Map
;------------------------------------------------------------------------------
xl::Map<*>{
    preview (
        #(
            "[",
            $e.m_tRBTree.m_nSize,
            "](",
            #tree(
                head: $e.m_tRBTree.m_tBinTree.m_pRoot,
                left: pLeft,
                right: pRight,
                size: $e.m_tRBTree.m_nSize
            ) : $e.tValue.tValue,
            ")"
        )
    )
    children (
        #(
            #tree(
                head: $e.m_tRBTree.m_tBinTree.m_pRoot,
                left: pLeft,
                right: pRight,
                size: $e.m_tRBTree.m_nSize
            ) : $e.tValue.tValue
        )
    )
}

;------------------------------------------------------------------------------
;  xl::String
;------------------------------------------------------------------------------
xl::StringT<wchar_t>{
    preview (
        [&$e.m_aData.m_pData[$e.m_aData.m_nStart], su]
    )
    stringview (
        [&$e.m_aData.m_pData[$e.m_aData.m_nStart], sub]
    )
    children (
        #(
            #array(
                expr: $e.m_aData.m_pData[$e.m_aData.m_nStart + $i],
                size: $e.m_aData.m_nEof - $e.m_aData.m_nStart
            )
        )
    )
}
xl::StringT<char>{
    preview (
        [&$e.m_aData.m_pData[$e.m_aData.m_nStart], s]
    )
    stringview (
        [&$e.m_aData.m_pData[$e.m_aData.m_nStart], sb]
    )
    children (
        #(
            #array(
                expr: $e.m_aData.m_pData[$e.m_aData.m_nStart + $i],
                size: $e.m_aData.m_nEof - $e.m_aData.m_nStart
            )
        )
    )
}

;------------------------------------------------------------------------------
;  xl::SharedPtr, xl::SharedArray
;------------------------------------------------------------------------------
xl::SharedPtr<*>|xl::SharedArray<*>{
    preview (
        #(
            "[",
            #if ($e.m_pRefCounter == 0) ( 0 ) #else ( $e.m_pRefCounter->m_nCount ),
            "] ",
            $e.m_pData
        )
    )
    children (
        #(
            [ref] : #if ($e.m_pRefCounter == 0) ( 0 ) #else ( $e.m_pRefCounter->m_nCount ),
            [val] : *$e.m_pData
        )
    )
}
